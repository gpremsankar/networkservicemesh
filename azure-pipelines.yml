# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.11' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  GO111MODULE: 'on'
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

pool:
  vmImage: 'ubuntu-latest'

steps:
  - script: |
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      mkdir -p '$(modulePath)/junit/'
      shopt -s extglob
      mv !(gopath) '$(modulePath)'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
      go version
    displayName: 'Set up the Go workspace'
  - script: |
      sudo apt-get install yamllint python3-pkg-resources
      ./.circleci/install-shellcheck.sh
    displayName: 'Sanity check install deps'
  - script: |
      ./scripts/yaml_lint.sh
    workingDirectory: '$(modulePath)'
    displayName: 'Yaml sanity check'
  - script: |
      "! go fmt ./... 2>&1 | read"
    workingDirectory: '$(modulePath)'
    displayName: 'Check go formatting'
  - script: |
      go get golang.org/x/lint/golint
      golint ./...
    displayName: 'Execute golint'

  - script: ./scripts/go-mod-download.sh
    workingDirectory: '$(modulePath)'
    displayName: 'Download go modules'

  - script: ./scripts/prepare-generate.sh
    workingDirectory: '$(modulePath)'
    displayName: 'Preapare code generation'

  - script: sudo ./scripts/install-protoc.sh
    displayName: 'Install protobuf compiler'

  - script: go generate ./...
    workingDirectory: '$(modulePath)'
    displayName: 'Generate all stuff'

  - script: make vet check
    workingDirectory: '$(modulePath)'
    displayName: 'Check scripts'

  - script:  go build ./...
    workingDirectory: '$(modulePath)'
    displayName: 'Check all code is compiling'

  - script: gotestsum --junitfile ./junit/sanity-unit-tests.xml -- -short `go list ./... | grep -v networkservicemesh/test/`
    workingDirectory: '$(modulePath)'
    displayName: 'Run sanity tests'